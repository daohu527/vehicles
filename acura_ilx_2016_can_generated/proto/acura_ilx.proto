syntax = "proto2";

package apollo.canbus;

message Gas_pedal_2_130 {
// Report Message
  // [Nm] [-1000|1000]
  optional int32 engine_torque_estimate = 1;
  // [Nm] [-1000|1000]
  optional int32 engine_torque_request = 2;
  // [] [0|255]
  optional int32 car_gas = 3;
  // [] [0|3]
  optional int32 counter = 4;
  // [] [0|15]
  optional int32 checksum = 5;
}

message Gas_pedal_13c {
// Report Message
  // [] [0|255]
  optional int32 car_gas = 1;
  // [] [0|3]
  optional int32 counter = 2;
  // [] [0|15]
  optional int32 checksum = 3;
}

message Steering_sensors_156 {
// Report Message
  // [deg] [-500|500]
  optional double steer_angle = 1;
  // [deg/s] [-3000|3000]
  optional double steer_angle_rate = 2;
  // [] [0|3]
  optional int32 counter = 3;
  // [] [0|15]
  optional int32 checksum = 4;
}

message Engine_data_158 {
// Report Message
  // [kph] [0|250]
  optional double xmission_speed = 1;
  // [rpm] [0|15000]
  optional int32 engine_rpm = 2;
  // [kph] [0|250]
  optional double xmission_speed2 = 3;
  // [m] [0|2550]
  optional double odometer = 4;
  // [] [0|3]
  optional int32 counter = 5;
  // [] [0|15]
  optional int32 checksum = 6;
}

message Powertrain_data_17c {
// Report Message
  // [] [0|255]
  optional int32 pedal_gas = 1;
  // [rpm] [0|15000]
  optional int32 engine_rpm = 2;
  // [] [0|1]
  optional bool gas_pressed = 3;
  // [] [0|1]
  optional bool acc_status = 4;
  // [] [0|1]
  optional int32 boh_17c = 5;
  // [] [0|1]
  optional bool brake_switch = 6;
  // [] [0|1]
  optional int32 boh2_17c = 7;
  // [] [0|1]
  optional bool brake_pressed = 8;
  // [] [0|1]
  optional int32 boh3_17c = 9;
  // [] [0|3]
  optional int32 counter = 10;
  // [] [0|15]
  optional int32 checksum = 11;
}

message Steer_status_18f {
// Report Message
  enum Steer_statusType {
    STEER_STATUS_NORMAL = 0;
    STEER_STATUS_NO_TORQUE_ALERT_1 = 2;
    STEER_STATUS_LOW_SPEED_LOCKOUT = 3;
    STEER_STATUS_NO_TORQUE_ALERT_2 = 4;
    STEER_STATUS_FAULT_1 = 5;
    STEER_STATUS_TMP_FAULT = 6;
  }
  // [tbd] [-31000|31000]
  optional double steer_torque_sensor = 1;
  // [deg/s] [-31000|31000]
  optional double steer_angle_rate = 2;
  // [] [0|15]
  optional Steer_statusType steer_status = 3;
  // [] [0|1]
  optional bool steer_control_active = 4;
  // [] [0|15]
  optional int32 steer_config_index = 5;
  // [] [0|3]
  optional int32 counter = 6;
  // [] [0|3]
  optional int32 checksum = 7;
}

message Gearbox_1a3 {
// Report Message
  enum Gear_shifterType {
    GEAR_SHIFTER_P = 1;
    GEAR_SHIFTER_R = 2;
    GEAR_SHIFTER_N = 3;
    GEAR_SHIFTER_D = 4;
    GEAR_SHIFTER_S = 10;
  }
  // 10 = reverse, 11 = transition [] [0|256]
  optional int32 gear = 1;
  // [] [0|15]
  optional Gear_shifterType gear_shifter = 2;
  // [] [0|3]
  optional int32 counter = 3;
  // [] [0|3]
  optional int32 checksum = 4;
}

message Vsa_status_1a4 {
// Report Message
  // [] [0|1000]
  optional double user_brake = 1;
  // [] [0|1]
  optional bool computer_braking = 2;
  // [] [0|1]
  optional bool esp_disabled = 3;
  // On when Brake Hold engaged [] [0|1]
  optional bool brake_hold_related = 4;
  // [] [0|1]
  optional bool brake_hold_active = 5;
  // [] [0|1]
  optional bool brake_hold_enabled = 6;
  // [] [0|3]
  optional int32 counter = 7;
  // [] [0|15]
  optional int32 checksum = 8;
}

message Scm_buttons_1a6 {
// Report Message
  enum Cruise_buttonsType {
    CRUISE_BUTTONS_NONE = 0;
    CRUISE_BUTTONS_MAIN = 1;
    CRUISE_BUTTONS_CANCEL = 2;
    CRUISE_BUTTONS_DECEL_SET = 3;
    CRUISE_BUTTONS_ACCEL_RES = 4;
    CRUISE_BUTTONS_TBD = 5;
    CRUISE_BUTTONS_TBD = 6;
    CRUISE_BUTTONS_TBD = 7;
  }
  enum Lights_settingType {
    LIGHTS_SETTING_NO_LIGHTS = 0;
    LIGHTS_SETTING_POSITION = 1;
    LIGHTS_SETTING_LOW_BEAM = 2;
    LIGHTS_SETTING_HIGH_BEAM = 3;
  }
  enum Cruise_settingType {
    CRUISE_SETTING_NONE = 0;
    CRUISE_SETTING_LKAS_BUTTON = 1;
    CRUISE_SETTING_TBD = 2;
    CRUISE_SETTING_DISTANCE_ADJ = 3;
  }
  // [] [0|7]
  optional Cruise_buttonsType cruise_buttons = 1;
  // [] [0|3]
  optional Lights_settingType lights_setting = 2;
  // [] [0|1]
  optional bool main_on = 3;
  // [] [0|3]
  optional Cruise_settingType cruise_setting = 4;
  // [] [0|3]
  optional int32 counter = 5;
  // [] [0|3]
  optional int32 checksum = 6;
}

message Steer_motor_torque_1ab {
// Report Message
  // [] [0|1]
  optional bool config_valid = 1;
  // [] [0|256]
  optional int32 motor_torque = 2;
  // [] [0|1]
  optional bool output_disabled = 3;
  // [] [0|3]
  optional int32 counter = 4;
  // [] [0|15]
  optional int32 checksum = 5;
}

message Standstill_1b0 {
// Report Message
  // [] [0|1]
  optional bool controlled_standstill = 1;
  // [] [0|1]
  optional bool wheels_moving = 2;
  // [] [0|1]
  optional bool brake_error_1 = 3;
  // [] [0|1]
  optional bool brake_error_2 = 4;
  // [] [0|3]
  optional int32 counter = 5;
  // [] [0|3]
  optional int32 checksum = 6;
}

message Wheel_speeds_1d0 {
// Report Message
  // [kph] [0|250]
  optional double wheel_speed_fl = 1;
  // [kph] [0|250]
  optional double wheel_speed_fr = 2;
  // [kph] [0|250]
  optional double wheel_speed_rl = 3;
  // [kph] [0|250]
  optional double wheel_speed_rr = 4;
  // [] [0|3]
  optional int32 checksum = 5;
}

message Brake_pressure_1e7 {
// Report Message
  // [] [0|1000]
  optional double brake_pressure1 = 1;
  // [] [0|1000]
  optional double brake_pressure2 = 2;
  // [] [0|15]
  optional int32 checksum = 3;
  // [] [0|3]
  optional int32 counter = 4;
}

message Vehicle_dynamics_1ea {
// Report Message
  // [m/s2] [-20|20]
  optional double lat_accel = 1;
  // wheel speed derivative, noisy and zero snapping [m/s2] [-20|20]
  optional double long_accel = 2;
  // [] [0|3]
  optional int32 counter = 3;
  // [] [0|3]
  optional int32 checksum = 4;
}

message Brake_command_1fa {
// Report Message
  enum ChimeType {
    CHIME_NO_CHIME = 0;
    CHIME_REPEATING_CHIME = 1;
    CHIME_CONTINUOUS_CHIME = 2;
    CHIME_SINGLE_CHIME = 3;
    CHIME_DOUBLE_CHIME = 4;
  }
  enum FcwType {
    FCW_NO_FCW = 0;
    FCW_FCW = 1;
    FCW_FCW = 2;
    FCW_FCW = 3;
  }
  enum Aeb_statusType {
    AEB_STATUS_NO_AEB = 0;
    AEB_STATUS_AEB_BRAKING = 1;
    AEB_STATUS_AEB_READY = 2;
    AEB_STATUS_AEB_PREPARE = 3;
  }
  // [] [0|1]
  optional int32 computer_brake = 1;
  // [] [0|1]
  optional bool brake_pump_request = 2;
  // Used by dual-can Nidec [] [0|1]
  optional bool brake_pump_request_alt = 3;
  // [] [0|1]
  optional int32 set_me_x00 = 4;
  // [] [0|1]
  optional bool cruise_override = 5;
  // [] [0|1]
  optional bool set_me_x00_2 = 6;
  // [] [0|1]
  optional bool cruise_fault_cmd = 7;
  // [] [0|1]
  optional bool cruise_cancel_cmd = 8;
  // [] [0|1]
  optional bool computer_brake_request = 9;
  // [] [0|1]
  optional bool set_me_1 = 10;
  // set for duration of suspected AEB event [] [0|1]
  optional bool aeb_req_1 = 11;
  // [] [0|7]
  optional int32 aeb_req_2 = 12;
  // [] [0|1]
  optional bool brake_lights = 13;
  // [] [0|1]
  optional int32 cruise_states = 14;
  // [] [0|7]
  optional ChimeType chime = 15;
  // [] [0|1]
  optional bool set_me_x00_3 = 16;
  // [] [0|3]
  optional FcwType fcw = 17;
  // [] [0|3]
  optional Aeb_statusType aeb_status = 18;
  // Used by dual-can Nidec [] [0|0]
  optional int32 computer_brake_alt = 19;
  // [] [0|3]
  optional int32 counter = 20;
  // [] [0|15]
  optional int32 checksum = 21;
}

message Gas_command_200 {
// Report Message
  // [] [0|1]
  optional double gas_command = 1;
  // [] [0|1]
  optional double gas_command2 = 2;
  // [] [0|1]
  optional bool enable = 3;
  // [] [0|15]
  optional int32 counter_pedal = 4;
  // [] [0|255]
  optional int32 checksum_pedal = 5;
}

message Gas_sensor_201 {
// Report Message
  enum StateType {
    STATE_NO_FAULT = 0;
    STATE_FAULT_BAD_CHECKSUM = 1;
    STATE_FAULT_SEND = 2;
    STATE_FAULT_SCE = 3;
    STATE_FAULT_STARTUP = 4;
    STATE_FAULT_TIMEOUT = 5;
  }
  // [] [0|1]
  optional int32 interceptor_gas = 1;
  // [] [0|1]
  optional int32 interceptor_gas2 = 2;
  // [] [0|15]
  optional StateType state = 3;
  // [] [0|15]
  optional int32 counter_pedal = 4;
  // [] [0|255]
  optional int32 checksum_pedal = 5;
}

message Rough_wheel_speed_255 {
// Report Message
  // [mph] [0|255]
  optional int32 wheel_speed_fl = 1;
  // [mph] [0|255]
  optional int32 wheel_speed_fr = 2;
  // [mph] [0|255]
  optional int32 wheel_speed_rl = 3;
  // [mph] [0|255]
  optional int32 wheel_speed_rr = 4;
  // [] [0|255]
  optional int32 set_to_x55 = 5;
  // [] [0|255]
  optional int32 set_to_x55_2 = 6;
  // [] [0|3]
  optional int32 counter = 7;
  // [] [0|15]
  optional int32 checksum = 8;
}

message Scm_feedback_294 {
// Report Message
  // [] [0|1]
  optional bool right_blinker = 1;
  // [] [0|1]
  optional bool left_blinker = 2;
  // [] [0|3]
  optional int32 wipers_speed = 3;
}

message Seatbelt_status_305 {
// Report Message
  // [] [0|1]
  optional bool seatbelt_driver_lamp = 1;
  // [] [0|1]
  optional bool seatbelt_pass_unlatched = 2;
  // [] [0|1]
  optional bool seatbelt_pass_latched = 3;
  // [] [0|1]
  optional bool seatbelt_driver_unlatched = 4;
  // [] [0|1]
  optional bool seatbelt_driver_latched = 5;
  // Might just be indicator light [] [0|1]
  optional bool pass_airbag_off = 6;
  // Might just be indicator light [] [0|1]
  optional bool pass_airbag_on = 7;
  // [] [0|3]
  optional int32 counter = 8;
  // [] [0|3]
  optional int32 checksum = 9;
}

message Car_speed_309 {
// Report Message
  // [mph] [0|255]
  optional int32 rough_car_speed = 1;
  // [kph] [0|65535]
  optional double car_speed = 2;
  // [kph] [0|65535]
  optional double rough_car_speed_3 = 3;
  // [mph] [0|255]
  optional int32 rough_car_speed_2 = 4;
  // [] [0|255]
  optional int32 lock_status = 5;
  // [] [0|3]
  optional int32 counter = 6;
  // [] [0|15]
  optional int32 checksum = 7;
  // [] [0|1]
  optional bool imperial_unit = 8;
}

message Acc_hud_30c {
// Report Message
  enum Cruise_speedType {
    CRUISE_SPEED_STOPPED = 252;
    CRUISE_SPEED_NO_SPEED = 255;
  }
  enum Hud_leadType {
    HUD_LEAD_NO_CAR = 0;
    HUD_LEAD_DASHED_CAR = 1;
    HUD_LEAD_SOLID_CAR = 2;
    HUD_LEAD_NO_CAR = 3;
  }
  // Used by Nidec [kph] [0|250]
  optional double pcm_speed = 1;
  // Used by Nidec [] [0|127]
  optional int32 pcm_gas = 2;
  // 255 = no speed [kph] [0|255]
  optional Cruise_speedType cruise_speed = 3;
  // [] [0|1]
  optional bool dtc_mode = 4;
  // [] [0|1]
  optional bool boh = 5;
  // [] [0|1]
  optional bool acc_problem = 6;
  // [] [0|1]
  optional bool fcm_off = 7;
  // [] [0|1]
  optional bool fcm_off_2 = 8;
  // [] [0|1]
  optional bool fcm_problem = 9;
  // [] [0|1]
  optional bool radar_obstructed = 10;
  // [] [0|1]
  optional bool enable_mini_car = 11;
  // [] [0|3]
  optional int32 hud_distance = 12;
  // [] [0|3]
  optional Hud_leadType hud_lead = 13;
  // [] [0|3]
  optional bool boh_3 = 14;
  // [] [0|3]
  optional bool boh_4 = 15;
  // [] [0|3]
  optional bool boh_5 = 16;
  // [] [0|3]
  optional bool cruise_control_label = 17;
  // [] [0|1]
  optional bool set_me_x01_2 = 18;
  // [] [0|1]
  optional bool imperial_unit = 19;
  // [] [0|1]
  optional bool acc_on = 20;
  // [] [0|1]
  optional int32 chime = 21;
  // [] [0|1]
  optional bool set_me_x01 = 22;
  // [] [0|1]
  optional int32 icons = 23;
  // [] [0|3]
  optional int32 counter = 24;
  // [] [0|3]
  optional int32 checksum = 25;
}

message Cruise_324 {
// Report Message
  // [kph] [0|255]
  optional int32 hud_speed_kph = 1;
  // [mph] [0|255]
  optional int32 hud_speed_mph = 2;
  // [] [0|255]
  optional int32 trip_fuel_consumed = 3;
  // 255 = no speed [] [0|255]
  optional int32 cruise_speed_pcm = 4;
  // [] [0|255]
  optional int32 boh2 = 5;
  // [] [0|255]
  optional int32 boh3 = 6;
  // [] [0|3]
  optional int32 counter = 7;
  // [] [0|15]
  optional int32 checksum = 8;
}

message Lkas_hud_33d {
// Report Message
  enum BeepType {
    BEEP_NO_BEEP = 0;
    BEEP_REPEATED_BEEP = 1;
    BEEP_TRIPLE_BEEP = 2;
    BEEP_SINGLE_BEEP = 3;
  }
  // [] [0|255]
  optional bool cam_temp_high = 1;
  // [] [0|127]
  optional int32 set_me_x41 = 2;
  // [] [0|127]
  optional int32 boh = 3;
  // [] [0|1]
  optional bool dashed_lanes = 4;
  // [] [0|1]
  optional bool dtc = 5;
  // [] [0|1]
  optional bool lkas_problem = 6;
  // [] [0|1]
  optional bool lkas_off = 7;
  // [] [0|1]
  optional bool solid_lanes = 8;
  // [] [0|1]
  optional bool ldw_right = 9;
  // [] [0|1]
  optional bool steering_required = 10;
  // [] [0|4]
  optional int32 boh_2 = 11;
  // [] [0|1]
  optional bool ldw_problem = 12;
  // beeps are pleasant, chimes are for warnngs etc... [] [0|1]
  optional BeepType beep = 13;
  // [] [0|1]
  optional bool ldw_on = 14;
  // [] [0|1]
  optional bool ldw_off = 15;
  // [] [0|1]
  optional bool clean_windshield = 16;
  // [] [0|255]
  optional int32 set_me_x48 = 17;
  // [] [0|3]
  optional int32 counter = 18;
  // [] [0|15]
  optional int32 checksum = 19;
}

message Stalk_status_374 {
// Report Message
  enum Dashboard_alertType {
    DASHBOARD_ALERT_NONE = 0;
    DASHBOARD_ALERT_ACC_PROBLEM = 51;
    DASHBOARD_ALERT_CMBS_PROBLEM = 55;
    DASHBOARD_ALERT_KEY_NOT_DETECTED = 75;
    DASHBOARD_ALERT_FASTEN_SEATBELT = 79;
    DASHBOARD_ALERT_LKAS_PROBLEM = 111;
    DASHBOARD_ALERT_BRAKE_SYSTEM_PROBLEM = 131;
    DASHBOARD_ALERT_BRAKE_HOLD_PROBLEM = 132;
    DASHBOARD_ALERT_TBD = 139;
    DASHBOARD_ALERT_DOOR_OPEN = 161;
  }
  // [] [0|255]
  optional Dashboard_alertType dashboard_alert = 1;
  // [] [0|1]
  optional bool auto_headlights = 2;
  // [] [0|1]
  optional bool high_beam_hold = 3;
  // [] [0|1]
  optional bool high_beam_flash = 4;
  // [] [0|1]
  optional bool headlights_on = 5;
  // [] [0|3]
  optional int32 wiper_switch = 6;
  // [] [0|3]
  optional int32 counter = 7;
  // [] [0|15]
  optional int32 checksum = 8;
}

message Stalk_status_2_37b {
// Report Message
  enum WipersType {
    WIPERS_OFF = 0;
    WIPERS_LOW = 2;
    WIPERS_HIGH = 4;
  }
  // [] [0|3]
  optional WipersType wipers = 1;
  // [] [0|1]
  optional bool low_beams = 2;
  // [] [0|1]
  optional bool high_beams = 3;
  // [] [0|1]
  optional bool park_lights = 4;
  // [] [0|3]
  optional int32 counter = 5;
  // [] [0|15]
  optional int32 checksum = 6;
}

message Cruise_params_37c {
// Report Message
  // [kph] [-128|127]
  optional double cruise_speed_offset = 1;
  // [] [0|3]
  optional int32 checksum = 2;
  // [] [0|3]
  optional int32 counter = 3;
}

message Doors_status_405 {
// Report Message
  // [] [0|1]
  optional bool door_open_fl = 1;
  // [] [0|1]
  optional bool door_open_fr = 2;
  // [] [0|1]
  optional bool door_open_rl = 3;
  // [] [0|1]
  optional bool door_open_rr = 4;
  // [] [0|1]
  optional bool trunk_open = 5;
  // [] [0|3]
  optional int32 counter = 6;
  // [] [0|15]
  optional int32 checksum = 7;
}

message Kinematics_91 {
// Report Message
  // [m/s2] [-20|20]
  optional double lat_accel = 1;
  // [] [0|3]
  optional int32 counter = 2;
  // [] [0|3]
  optional int32 checksum = 3;
}

message Kinematics_alt_94 {
// Report Message
  // [m/s2] [-20|20]
  optional double lat_accel = 1;
  // [m/s2] [-20|20]
  optional double long_accel = 2;
  // [] [0|3]
  optional int32 checksum = 3;
  // [] [0|3]
  optional int32 counter = 4;
}

message Steering_control_e4 {
// Report Message
  // [] [-3840|3840]
  optional int32 steer_torque = 1;
  // [] [0|1]
  optional bool steer_torque_request = 2;
  // [] [0|0]
  optional int32 set_me_x00 = 3;
  // [] [0|3]
  optional int32 counter = 4;
  // [] [0|3]
  optional int32 checksum = 5;
}

message Acura_ilx {
  optional Gas_pedal_2_130 gas_pedal_2_130 = 1; // report message
  optional Gas_pedal_13c gas_pedal_13c = 2; // report message
  optional Steering_sensors_156 steering_sensors_156 = 3; // report message
  optional Engine_data_158 engine_data_158 = 4; // report message
  optional Powertrain_data_17c powertrain_data_17c = 5; // report message
  optional Steer_status_18f steer_status_18f = 6; // report message
  optional Gearbox_1a3 gearbox_1a3 = 7; // report message
  optional Vsa_status_1a4 vsa_status_1a4 = 8; // report message
  optional Scm_buttons_1a6 scm_buttons_1a6 = 9; // report message
  optional Steer_motor_torque_1ab steer_motor_torque_1ab = 10; // report message
  optional Standstill_1b0 standstill_1b0 = 11; // report message
  optional Wheel_speeds_1d0 wheel_speeds_1d0 = 12; // report message
  optional Brake_pressure_1e7 brake_pressure_1e7 = 13; // report message
  optional Vehicle_dynamics_1ea vehicle_dynamics_1ea = 14; // report message
  optional Brake_command_1fa brake_command_1fa = 15; // report message
  optional Gas_command_200 gas_command_200 = 16; // report message
  optional Gas_sensor_201 gas_sensor_201 = 17; // report message
  optional Rough_wheel_speed_255 rough_wheel_speed_255 = 18; // report message
  optional Scm_feedback_294 scm_feedback_294 = 19; // report message
  optional Seatbelt_status_305 seatbelt_status_305 = 20; // report message
  optional Car_speed_309 car_speed_309 = 21; // report message
  optional Acc_hud_30c acc_hud_30c = 22; // report message
  optional Cruise_324 cruise_324 = 23; // report message
  optional Lkas_hud_33d lkas_hud_33d = 24; // report message
  optional Stalk_status_374 stalk_status_374 = 25; // report message
  optional Stalk_status_2_37b stalk_status_2_37b = 26; // report message
  optional Cruise_params_37c cruise_params_37c = 27; // report message
  optional Doors_status_405 doors_status_405 = 28; // report message
  optional Kinematics_91 kinematics_91 = 29; // report message
  optional Kinematics_alt_94 kinematics_alt_94 = 30; // report message
  optional Steering_control_e4 steering_control_e4 = 31; // report message
}
